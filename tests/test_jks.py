#!/usr/bin/env python
# vim: set ai et ts=4 sw=4 sts=4:
"""
Tests for pyjks.
Note: run 'mvn test' in the tests/java directory to reproduce keystore files (requires a working Maven installation)
"""

import os, sys
import jks
import unittest
import subprocess
from pprint import pprint

class cd:
    def __init__(self, newdir):
        self.newdir = newdir
    def __enter__(self):
        self.olddir = os.getcwd()
        os.chdir(self.newdir)
    def __exit__(self, etype, value, trace):
        os.chdir(self.olddir)

class AbstractTest(unittest.TestCase):
    def find_private_key(self, ks, alias):
        for pk in ks.private_keys:
            if pk.alias == alias:
                return pk
        return None

    def find_secret_key(self, ks, alias):
        for sk in ks.secret_keys:
            if sk.alias == alias:
                return sk
        return None

    def find_cert(self, ks, alias):
        for c in ks.certs:
            if c.alias == alias:
                return c
        return None

    def get_expected_rsa1024_bits(self):
        """The Java test cases generate a single RSA-1024 key and certificate and write it to both a JKS and JCEKS keystore, so both tests need to check
        for the same expected key/cert bits after parsing"""
        RSA1024_expected_key = "\x30\x82\x02\x76\x02\x01\x00\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x04\x82\x02\x60\x30\x82\x02\x5c\x02\x01" +\
                               "\x00\x02\x81\x81\x00\x94\xa4\xbc\xf8\xc4\x95\x30\x35\x7a\x99\x81\x65\xaa\x17\x22\x99\x29\x7f\xa2\x44\xd3\xdc\xf4\x35\xdf\xb9\xa7" +\
                               "\x65\xe9\xf8\xe3\xb5\x2b\xa9\xa2\x19\x8a\x41\x8c\xbf\xa8\x9c\xe8\xc2\x1c\xc6\x23\xb0\xad\x04\x56\x52\xb8\x56\x9d\xc1\xc4\x9c\xe8" +\
                               "\xf7\x36\x13\xfc\x09\xdd\x70\x86\x7a\x3c\x28\xbb\xea\x02\x54\xdf\xe8\x39\x4a\xce\x87\x39\x7f\x1e\x97\xc2\x79\x96\x3e\xf4\xc2\x2a" +\
                               "\x48\x3e\xca\x6b\xbf\xa2\x50\x96\x1c\xc2\x81\x5b\xc0\x08\x64\x9f\xca\xec\xa5\x40\xa7\x56\x12\xd7\xbd\x13\x4a\x74\x56\x6e\x70\xa7" +\
                               "\xe9\xb7\x4a\xa9\xef\x02\x03\x01\x00\x01\x02\x81\x80\x64\x99\xd6\x37\xbb\xbc\x88\xe3\x38\xf5\x99\xa8\xf7\xe4\x2e\x8b\x60\x95\xbc" +\
                               "\x7a\x3e\xb5\x85\x26\xcd\x23\x36\x93\x78\x35\xf5\xcf\x11\x1c\xfe\xd3\xb0\x49\xca\xfb\x90\x1f\x9a\x3c\x7e\x02\xef\xf6\xcc\x32\x6a" +\
                               "\x46\x13\xf2\xb3\x54\x88\x3f\xf6\x40\x11\xfe\x96\x8d\xfa\x6f\xd4\xb7\x0b\xe3\x2a\x98\xa7\x13\x78\x0b\x0f\x6c\x70\x33\xc0\xe0\x78" +\
                               "\xfd\xf5\x27\x54\xd3\xef\xdc\xa3\xbb\x69\xa0\x78\x6d\x1f\x27\x8e\xac\x57\xc9\xe0\x48\xf4\x36\x92\x62\x5c\xfe\xd8\x2c\xb8\x2c\x4c" +\
                               "\x5e\x3c\x4f\xdc\x21\xd4\xb4\x27\x17\xeb\xc3\x84\xc1\x02\x41\x00\xfa\x10\xb7\x64\x55\x82\xd4\x66\xe7\x8f\x58\x28\x36\x39\x96\xa3" +\
                               "\x3e\x7f\xf6\x62\x5a\x3d\xd4\xf6\x39\x32\x76\xff\x95\xc1\x08\xb8\xae\x63\x65\xf0\x84\x8a\x43\xe8\xa4\x2a\x37\x2a\xa5\x0a\x3e\x31" +\
                               "\x16\x88\x8b\x72\x61\xf2\x03\x81\x7a\xa7\x69\xf2\x91\xca\x5c\xe1\x02\x41\x00\x98\x2b\xd4\x31\xb3\x09\x7c\x29\x3f\x89\x3d\x42\x2e" +\
                               "\xab\x3f\x61\x89\x24\xff\x1c\xbb\x8f\xf5\x0c\x55\xa1\x9b\x31\x5b\xb4\x16\x7b\x07\x39\x0e\x9b\x0d\xed\x42\x03\xfa\xea\x8e\x11\x22" +\
                               "\xbc\x37\xf0\x3d\xa7\x1e\x4b\x70\x6b\x86\x61\x0a\xb8\xfc\x0d\x9a\xcb\x90\xcf\x02\x40\x7c\x9d\x65\xf6\xaf\x12\x52\x6c\xb1\x8a\x62" +\
                               "\x81\x2f\x7c\x85\x4f\xf6\x6e\x68\x46\xdc\xf7\xa1\x2f\xce\x93\x12\x70\x0d\x9d\xb3\x8d\xed\x01\x85\xa4\x55\x38\x5d\xdd\x0a\x2a\x2b" +\
                               "\x71\xa9\xeb\x2f\xd0\xe0\x8c\xcd\x09\x04\x3c\x49\x78\xf5\xb9\x85\xf7\xa6\xa5\x74\xa1\x02\x41\x00\x90\xc6\x0a\x20\xaa\x94\x58\x93" +\
                               "\x29\xc6\x99\x08\x71\x3c\x2d\x95\xcf\x13\xea\xbe\xdc\x57\x8e\xad\x08\x7f\x33\x16\x57\x87\xd3\x67\x83\x2c\xae\x8f\xa8\x45\x54\xec" +\
                               "\x52\x79\x7b\x66\x24\x24\xec\x17\x5d\xa0\xb4\x7a\xd3\x5f\x09\x3f\x24\x23\x70\x72\x45\x16\x6d\x13\x02\x40\x2d\x6f\x62\x6a\x91\x4e" +\
                               "\x7c\x27\xb4\xc3\x44\x8c\x91\xc7\x29\x72\xc9\x51\x4c\x13\x2d\x42\xa4\x17\xb2\x13\x54\x79\x7c\xd1\x90\x3e\x36\xec\x46\xd6\xae\x2a" +\
                               "\xca\x9e\xc2\x58\x36\xcb\xb3\x14\x61\xb6\x1a\xe7\x34\xac\x42\x00\xe7\x1a\x46\x74\x8b\x7a\xc7\xe5\xdc\x35"
        RSA1024_expected_certs = ["\x30\x82\x01\x98\x30\x82\x01\x01\xa0\x03\x02\x01\x02\x02\x01\x00\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x30" +\
                                  "\x12\x31\x10\x30\x0e\x06\x03\x55\x04\x03\x0c\x07\x52\x53\x41\x31\x30\x32\x34\x30\x1e\x17\x0d\x31\x36\x30\x34\x32\x34\x31\x38\x30" +\
                                  "\x32\x30\x31\x5a\x17\x0d\x31\x38\x30\x34\x32\x34\x31\x38\x30\x32\x30\x31\x5a\x30\x12\x31\x10\x30\x0e\x06\x03\x55\x04\x03\x0c\x07" +\
                                  "\x52\x53\x41\x31\x30\x32\x34\x30\x81\x9f\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x01\x05\x00\x03\x81\x8d\x00\x30\x81\x89" +\
                                  "\x02\x81\x81\x00\x94\xa4\xbc\xf8\xc4\x95\x30\x35\x7a\x99\x81\x65\xaa\x17\x22\x99\x29\x7f\xa2\x44\xd3\xdc\xf4\x35\xdf\xb9\xa7\x65" +\
                                  "\xe9\xf8\xe3\xb5\x2b\xa9\xa2\x19\x8a\x41\x8c\xbf\xa8\x9c\xe8\xc2\x1c\xc6\x23\xb0\xad\x04\x56\x52\xb8\x56\x9d\xc1\xc4\x9c\xe8\xf7" +\
                                  "\x36\x13\xfc\x09\xdd\x70\x86\x7a\x3c\x28\xbb\xea\x02\x54\xdf\xe8\x39\x4a\xce\x87\x39\x7f\x1e\x97\xc2\x79\x96\x3e\xf4\xc2\x2a\x48" +\
                                  "\x3e\xca\x6b\xbf\xa2\x50\x96\x1c\xc2\x81\x5b\xc0\x08\x64\x9f\xca\xec\xa5\x40\xa7\x56\x12\xd7\xbd\x13\x4a\x74\x56\x6e\x70\xa7\xe9" +\
                                  "\xb7\x4a\xa9\xef\x02\x03\x01\x00\x01\x30\x0d\x06\x09\x2a\x86\x48\x86\xf7\x0d\x01\x01\x0b\x05\x00\x03\x81\x81\x00\x71\x58\xc8\x4d" +\
                                  "\x52\xdc\xdb\x39\xe6\x44\xf4\x6d\xaf\xd5\x18\x17\x0f\x11\x98\x25\x40\xdd\xd1\xdd\x47\xc1\x12\xa4\xa4\x4c\xc5\x05\xef\x3d\x57\xf6" +\
                                  "\xdd\xfc\x95\xce\xe5\x83\x57\xfd\x35\x88\x9d\xb7\x4b\x12\x67\x25\x09\x51\xec\x11\x05\xd4\x00\x96\x1a\xb3\xc5\x69\xaa\xb6\xc7\x94" +\
                                  "\x43\x7c\x20\x8a\x28\x3d\x33\x61\xac\x9f\x18\x19\xfe\x5d\xbe\xda\xa8\x48\xba\xe4\x4c\x63\x0e\x7d\xf7\x0c\xad\x26\x74\x6c\xde\xe3" +\
                                  "\x44\xa3\x29\xe1\x05\xdb\x90\x44\x7f\xde\xb1\x84\xcb\x66\xc5\xf4\x66\xc5\x07\x3d\xa4\x20\xf8\xa4\x3f\xe0\x81\x04"]
        return RSA1024_expected_key, RSA1024_expected_certs

class JksTests(AbstractTest):
    def test_empty_store(self):
        store = jks.KeyStore.load("tests/keystores/jks/empty.jks", "")
        self.assertEqual(len(store.private_keys), 0)
        self.assertEqual(len(store.secret_keys), 0)
        self.assertEqual(len(store.certs), 0)

    def test_rsa_1024(self):
        store = jks.KeyStore.load("tests/keystores/jks/RSA1024.jks", "12345678")
        pk = self.find_private_key(store, "mykey")

        expected_key, expected_certs = self.get_expected_rsa1024_bits()

        self.assertEqual(pk.pkey_pkcs8, expected_key)
        self.assertEqual(pk.algorithm_oid, jks.RSA_ENCRYPTION_OID)
        self.assertEqual(len(pk.cert_chain), len(expected_certs))
        self.assertEqual(pk.cert_chain[0][1], expected_certs[0])

class JceTests(AbstractTest):
    def test_empty_store(self):
        store = jks.KeyStore.load("tests/keystores/jceks/empty.jceks", "")
        self.assertEqual(len(store.private_keys), 0)
        self.assertEqual(len(store.secret_keys), 0)
        self.assertEqual(len(store.certs), 0)

    def test_rsa_1024(self):
        store = jks.KeyStore.load("tests/keystores/jceks/RSA1024.jceks", "12345678")
        pk = self.find_private_key(store, "mykey")

        expected_key, expected_certs = self.get_expected_rsa1024_bits()

        self.assertEqual(pk.pkey_pkcs8, expected_key)
        self.assertEqual(pk.algorithm_oid, jks.RSA_ENCRYPTION_OID)
        self.assertEqual(len(pk.cert_chain), len(expected_certs))
        self.assertEqual(pk.cert_chain[0][1], expected_certs[0])

class JceOnlyTests(AbstractTest):
    def test_des_secret_key(self):
        store = jks.KeyStore.load("tests/keystores/jceks/DES.jceks", "12345678")
        sk = self.find_secret_key(store, "mykey")
        self.assertEqual(sk.key, "\x4c\xf2\xfe\x91\x5d\x08\x2a\x43")
        self.assertEqual(sk.algorithm, "DES")
        self.assertEqual(sk.size, 64)

    def test_desede_secret_key(self):
        store = jks.KeyStore.load("tests/keystores/jceks/DESede.jceks", "12345678")
        sk = self.find_secret_key(store, "mykey")
        self.assertEqual(sk.key, "\x67\x5e\x52\x45\xe9\x67\x3b\x4c\x8f\xc1\x94\xce\xec\x43\x3b\x31\x8c\x45\xc2\xe0\x67\x5e\x52\x45")
        self.assertEqual(sk.algorithm, "DESede")
        self.assertEqual(sk.size, 192)

    def test_aes128_secret_key(self):
        store = jks.KeyStore.load("tests/keystores/jceks/AES128.jceks", "12345678")
        sk = self.find_secret_key(store, "mykey")
        self.assertEqual(sk.key, "\x66\x6e\x02\x21\xcc\x44\xc1\xfc\x4a\xab\xf4\x58\xf9\xdf\xdd\x3c")
        self.assertEqual(sk.algorithm, "AES")
        self.assertEqual(sk.size, 128)

    def test_aes256_secret_key(self):
        store = jks.KeyStore.load("tests/keystores/jceks/AES256.jceks", "12345678")
        sk = self.find_secret_key(store, "mykey")
        self.assertEqual(sk.key, "\xe7\xd7\xc2\x62\x66\x82\x21\x78\x7b\x6b\x5a\x0f\x68\x77\x12\xfd\xe4\xbe\x52\xe9\xe7\xd7\xc2\x62\x66\x82\x21\x78\x7b\x6b\x5a\x0f")
        self.assertEqual(sk.algorithm, "AES")
        self.assertEqual(sk.size, 256)

    def test_pbkdf2_hmac_sha1(self):
        store = jks.KeyStore.load("tests/keystores/jceks/PBKDF2WithHmacSHA1.jceks", "12345678")
        sk = self.find_secret_key(store, "mykey")
        self.assertEqual(sk.key, "\x57\x95\x36\xd9\xa2\x7f\x7e\x31\x4e\xf4\xe3\xff\xa5\x76\x26\xef\xe6\x70\xe8\xf4\xd2\x96\xcd\x31\xba\x1a\x82\x7d\x9a\x3b\x1e\xe1")
        self.assertEqual(sk.algorithm, "PBKDF2WithHmacSHA1")
        self.assertEqual(sk.size, 256)

    def test_unknown_type_of_sealed_object(self):
        """Verify that an exception is raised when encountering a (serialized) Java object inside a SecretKey entry that is not of type javax.crypto.SealedObject"""
        self.assertRaises(jks.UnexpectedJavaTypeException, lambda: \
            jks.KeyStore.load("tests/keystores/jceks/unknown_type_of_sealed_object.jceks", "12345678"))

    def test_unknown_type_inside_sealed_object(self):
        """Verify that an exception is raised when encountering a (serialized) Java object inside of a SealedObject in a SecretKey entry (after decryption) that is not of a recognized/supported type"""
        self.assertRaises(jks.UnexpectedJavaTypeException, lambda: \
            jks.KeyStore.load("tests/keystores/jceks/unknown_type_inside_sealed_object.jceks", "12345678"))

    def test_unknown_sealed_object_sealAlg(self):
        self.assertRaises(jks.UnexpectedAlgorithmException, lambda: \
            jks.KeyStore.load("tests/keystores/jceks/unknown_sealed_object_sealAlg.jceks", "12345678"))

if __name__ == "__main__":
    unittest.main()
